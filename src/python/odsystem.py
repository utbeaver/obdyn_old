# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_odsystem')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_odsystem')
    _odsystem = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_odsystem', [dirname(__file__)])
        except ImportError:
            import _odsystem
            return _odsystem
        try:
            _mod = imp.load_module('_odsystem', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _odsystem = swig_import_helper()
    del swig_import_helper
else:
    import _odsystem
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class V3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V3, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _odsystem.new_V3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self):
        return _odsystem.V3_size(self)

    def get(self, i):
        return _odsystem.V3_get(self, i)

    def ptr(self):
        return _odsystem.V3_ptr(self)
    __swig_destroy__ = _odsystem.delete_V3
    __del__ = lambda self: None
V3_swigregister = _odsystem.V3_swigregister
V3_swigregister(V3)

class V6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V6, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _odsystem.new_V6()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, val, n=6):
        return _odsystem.V6_set(self, val, n)

    def get(self, i):
        return _odsystem.V6_get(self, i)

    def ptr(self):
        return _odsystem.V6_ptr(self)
    __swig_destroy__ = _odsystem.delete_V6
    __del__ = lambda self: None
V6_swigregister = _odsystem.V6_swigregister
V6_swigregister(V6)

class V9(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V9, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V9, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _odsystem.new_V9()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _odsystem.V9_set(self, *args)

    def get(self, i):
        return _odsystem.V9_get(self, i)

    def ptr(self):
        return _odsystem.V9_ptr(self)
    __swig_destroy__ = _odsystem.delete_V9
    __del__ = lambda self: None
V9_swigregister = _odsystem.V9_swigregister
V9_swigregister(V9)

class V16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V16, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _odsystem.V16_v_set
    __swig_getmethods__["v"] = _odsystem.V16_v_get
    if _newclass:
        v = _swig_property(_odsystem.V16_v_get, _odsystem.V16_v_set)

    def __init__(self):
        this = _odsystem.new_V16()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, i, vv):
        return _odsystem.V16_set(self, i, vv)

    def ptr(self):
        return _odsystem.V16_ptr(self)
    __swig_destroy__ = _odsystem.delete_V16
    __del__ = lambda self: None
V16_swigregister = _odsystem.V16_swigregister
V16_swigregister(V16)

class OdMarker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdMarker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdMarker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _odsystem.new_OdMarker(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdMarker
    __del__ = lambda self: None

    def core(self):
        return _odsystem.OdMarker_core(self)

    def info(self, arg2):
        return _odsystem.OdMarker_info(self, arg2)

    def P(self):
        return _odsystem.OdMarker_P(self)

    def V(self):
        return _odsystem.OdMarker_V(self)

    def A(self):
        return _odsystem.OdMarker_A(self)

    def Q(self):
        return _odsystem.OdMarker_Q(self)

    def W(self):
        return _odsystem.OdMarker_W(self)

    def DW(self):
        return _odsystem.OdMarker_DW(self)
OdMarker_swigregister = _odsystem.OdMarker_swigregister
OdMarker_swigregister(OdMarker)

class OdBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdBody, name)
    __repr__ = _swig_repr

    def __init__(self, id, name_=None):
        this = _odsystem.new_OdBody(id, name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdBody
    __del__ = lambda self: None

    def setMass(self, arg2):
        return _odsystem.OdBody_setMass(self, arg2)

    def setI(self, arg2):
        return _odsystem.OdBody_setI(self, arg2)

    def info(self, msg):
        return _odsystem.OdBody_info(self, msg)

    def add_cm_marker(self, pM):
        return _odsystem.OdBody_add_cm_marker(self, pM)

    def add_marker(self, pM, arg3=0):
        return _odsystem.OdBody_add_marker(self, pM, arg3)

    def core(self):
        return _odsystem.OdBody_core(self)
OdBody_swigregister = _odsystem.OdBody_swigregister
OdBody_swigregister(OdBody)

class OdSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdSystem, name)
    __repr__ = _swig_repr

    def __init__(self, pn, r):
        this = _odsystem.new_OdSystem(pn, r)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdSystem
    __del__ = lambda self: None

    def cpuTime(self):
        return _odsystem.OdSystem_cpuTime(self)

    def jacTime(self):
        return _odsystem.OdSystem_jacTime(self)

    def rhsTime(self):
        return _odsystem.OdSystem_rhsTime(self)

    def solTime(self):
        return _odsystem.OdSystem_solTime(self)

    def setGravity(self, t):
        return _odsystem.OdSystem_setGravity(self, t)

    def setName(self, arg2):
        return _odsystem.OdSystem_setName(self, arg2)

    def add_body(self, pB):
        return _odsystem.OdSystem_add_body(self, pB)

    def add_constraint(self, pJ):
        return _odsystem.OdSystem_add_constraint(self, pJ)

    def add_force(self, pF):
        return _odsystem.OdSystem_add_force(self, pF)

    def add_joint_force(self, pJF):
        return _odsystem.OdSystem_add_joint_force(self, pJF)

    def add_joint_spdp(self, pJF):
        return _odsystem.OdSystem_add_joint_spdp(self, pJF)

    def info(self, msg):
        return _odsystem.OdSystem_info(self, msg)

    def get_num_constraint(self):
        return _odsystem.OdSystem_get_num_constraint(self)

    def get_num_body(self):
        return _odsystem.OdSystem_get_num_body(self)

    def displacement_ic(self):
        return _odsystem.OdSystem_displacement_ic(self)

    def velocity_ic(self):
        return _odsystem.OdSystem_velocity_ic(self)

    def acceleration_and_force_ic(self):
        return _odsystem.OdSystem_acceleration_and_force_ic(self)

    def kinematic_analysis(self, arg2=1.0, arg3=1, tol=5.0e-16, iters=26):
        return _odsystem.OdSystem_kinematic_analysis(self, arg2, arg3, tol, iters)

    def static_analysis(self, iter=15, tol=5.0e-5):
        return _odsystem.OdSystem_static_analysis(self, iter, tol)

    def dynamic_analysis_bdf(self, end_time, tol=1.0e-3, iter=6, maxH=.1, minH=1.0e-6, _initStep=.005, arg8=0):
        return _odsystem.OdSystem_dynamic_analysis_bdf(self, end_time, tol, iter, maxH, minH, _initStep, arg8)

    def dynamic_analysis_hht(self, end_time, tol=1.0e-3, iter=6, maxH=.1, minH=1.0e-6, _initStep=.005, arg8=0):
        return _odsystem.OdSystem_dynamic_analysis_hht(self, end_time, tol, iter, maxH, minH, _initStep, arg8)

    def numdif(self):
        return _odsystem.OdSystem_numdif(self)
OdSystem_swigregister = _odsystem.OdSystem_swigregister
OdSystem_swigregister(OdSystem)

class OdJoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdJoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdJoint, name)
    __repr__ = _swig_repr

    def __init__(self, id, name_=None):
        this = _odsystem.new_OdJoint(id, name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdJoint
    __del__ = lambda self: None

    def revolute(self):
        return _odsystem.OdJoint_revolute(self)

    def translational(self):
        return _odsystem.OdJoint_translational(self)

    def spherical(self):
        return _odsystem.OdJoint_spherical(self)

    def universal(self):
        return _odsystem.OdJoint_universal(self)

    def fixed(self):
        return _odsystem.OdJoint_fixed(self)

    def free(self):
        return _odsystem.OdJoint_free(self)

    def txyrz(self):
        return _odsystem.OdJoint_txyrz(self)

    def core(self):
        return _odsystem.OdJoint_core(self)

    def set_imarker(self, pM):
        return _odsystem.OdJoint_set_imarker(self, pM)

    def set_jmarker(self, pM):
        return _odsystem.OdJoint_set_jmarker(self, pM)

    def set_expr(self, pexpr, arg3=0):
        return _odsystem.OdJoint_set_expr(self, pexpr, arg3)

    def info(self, msg):
        return _odsystem.OdJoint_info(self, msg)

    def disp(self, *args):
        return _odsystem.OdJoint_disp(self, *args)

    def vel(self, *args):
        return _odsystem.OdJoint_vel(self, *args)

    def acc(self, *args):
        return _odsystem.OdJoint_acc(self, *args)

    def dofs(self):
        return _odsystem.OdJoint_dofs(self)
OdJoint_swigregister = _odsystem.OdJoint_swigregister
OdJoint_swigregister(OdJoint)

class OdForce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdForce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdForce, name)
    __repr__ = _swig_repr

    def __init__(self, id, name_=None):
        this = _odsystem.new_OdForce(id, name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdForce
    __del__ = lambda self: None

    def sforce(self):
        return _odsystem.OdForce_sforce(self)

    def storque(self):
        return _odsystem.OdForce_storque(self)

    def spdpt(self):
        return _odsystem.OdForce_spdpt(self)

    def beam(self):
        return _odsystem.OdForce_beam(self)

    def bushing(self):
        return _odsystem.OdForce_bushing(self)

    def core(self):
        return _odsystem.OdForce_core(self)

    def set_imarker(self, pM):
        return _odsystem.OdForce_set_imarker(self, pM)

    def set_jmarker(self, pM):
        return _odsystem.OdForce_set_jmarker(self, pM)

    def set_expr(self, pexpr):
        return _odsystem.OdForce_set_expr(self, pexpr)

    def set_stiffness(self, val):
        return _odsystem.OdForce_set_stiffness(self, val)

    def set_damping(self, val):
        return _odsystem.OdForce_set_damping(self, val)

    def set_distance(self, val):
        return _odsystem.OdForce_set_distance(self, val)

    def set_force(self, val):
        return _odsystem.OdForce_set_force(self, val)

    def set_ixx(self, val):
        return _odsystem.OdForce_set_ixx(self, val)

    def set_iyy(self, val):
        return _odsystem.OdForce_set_iyy(self, val)

    def set_izz(self, val):
        return _odsystem.OdForce_set_izz(self, val)

    def set_area(self, val):
        return _odsystem.OdForce_set_area(self, val)

    def set_asy(self, val):
        return _odsystem.OdForce_set_asy(self, val)

    def set_asz(self, val):
        return _odsystem.OdForce_set_asz(self, val)

    def set_ratio(self, val):
        return _odsystem.OdForce_set_ratio(self, val)

    def set_emodulus(self, val):
        return _odsystem.OdForce_set_emodulus(self, val)

    def set_gmodulus(self, val):
        return _odsystem.OdForce_set_gmodulus(self, val)

    def set_Kt(self, _k):
        return _odsystem.OdForce_set_Kt(self, _k)

    def set_Ct(self, _c):
        return _odsystem.OdForce_set_Ct(self, _c)

    def set_F(self, _f):
        return _odsystem.OdForce_set_F(self, _f)

    def set_Kr(self, _k):
        return _odsystem.OdForce_set_Kr(self, _k)

    def set_Cr(self, _c):
        return _odsystem.OdForce_set_Cr(self, _c)

    def set_T(self, _f):
        return _odsystem.OdForce_set_T(self, _f)

    def info(self, msg):
        return _odsystem.OdForce_info(self, msg)
OdForce_swigregister = _odsystem.OdForce_swigregister
OdForce_swigregister(OdForce)

class OdJointForce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdJointForce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdJointForce, name)
    __repr__ = _swig_repr

    def __init__(self, id, name_=None):
        this = _odsystem.new_OdJointForce(id, name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdJointForce
    __del__ = lambda self: None

    def core(self):
        return _odsystem.OdJointForce_core(self)

    def setJoint(self, pJ):
        return _odsystem.OdJointForce_setJoint(self, pJ)

    def set_expr(self, pexpr):
        return _odsystem.OdJointForce_set_expr(self, pexpr)

    def info(self, msg):
        return _odsystem.OdJointForce_info(self, msg)
OdJointForce_swigregister = _odsystem.OdJointForce_swigregister
OdJointForce_swigregister(OdJointForce)

class OdJointSPDP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OdJointSPDP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OdJointSPDP, name)
    __repr__ = _swig_repr

    def __init__(self, id, name_=None):
        this = _odsystem.new_OdJointSPDP(id, name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _odsystem.delete_OdJointSPDP
    __del__ = lambda self: None

    def core(self):
        return _odsystem.OdJointSPDP_core(self)

    def setJoint(self, pj, ith_=0):
        return _odsystem.OdJointSPDP_setJoint(self, pj, ith_)

    def set_stiffness(self, val):
        return _odsystem.OdJointSPDP_set_stiffness(self, val)

    def set_damping(self, val):
        return _odsystem.OdJointSPDP_set_damping(self, val)

    def set_distance(self, val):
        return _odsystem.OdJointSPDP_set_distance(self, val)

    def set_force(self, val):
        return _odsystem.OdJointSPDP_set_force(self, val)

    def info(self, msg):
        return _odsystem.OdJointSPDP_info(self, msg)
OdJointSPDP_swigregister = _odsystem.OdJointSPDP_swigregister
OdJointSPDP_swigregister(OdJointSPDP)

# This file is compatible with both classic and new-style classes.


